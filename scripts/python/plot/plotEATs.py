#!/usr/bin/env python
#
# Compute EATs for all time steps using files generated by swak4Foam.
# Plots them against time and computes the resulting PDF for EATs
# under the assumption that time is sampled uniformly and using an
# exponential fit to the EAT evolution.
#
# Usage: computeEATs.py
#

from postprocessing.readSwakFiles import readSwakFileColumn, \
                                         getEATs, \
                                         loadSwakFile, \
                                         createSwakFilePath
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

caseName = '.'

# read values
statNameMin = 'centerline_PO2'
statNameMax = 'near_RBC_wall_PO2'

times             = readSwakFileColumn(caseName, statNameMax, 'time')
near_RBC_wall_PO2 = readSwakFileColumn(caseName, statNameMax, 'max')
centerline_PO2    = readSwakFileColumn(caseName, statNameMax, 'min')

PO2_RBC_array     = loadSwakFile(createSwakFilePath(caseName, 'RBC_PO2'))

# compute EATs
EATs = getEATs(caseName)

# plot it
plt.plot(times, EATs)

plt.xlabel('time [s]')
plt.ylabel('EATs [mmHg]')
plt.title('EAT as function of time')
plt.grid(True)

# compute exponential fit using scipy.optimize
def func(x, a, b, c):
    return a * np.exp(-b*x) + c

# takes values t >= t_1 into account, where 
# t_1 is the time where the EAT is the highest (not necessarily t = 0,
# since the system needs a short time to adjust)
idx_t_1 = EATs.argmax()
subset = range(idx_t_1, len(times))
popt, pcov = curve_fit(func, times[subset], EATs[subset])
a   = popt[0]
tau = 1/popt[1]
c   = popt[2]
print "Exponent for EATs = %g" % tau

plt.plot(times, func(times, *popt))
plt.savefig('EATs.png')

# plot PDF of EATs based on uniform time distribution
# on the interval [0, T] and the exponential fit computed
# above.
# t_1 is the time where the EAT is the highest (not necessarily t = 0,
# since the system needs a short time to adjust)
T = 0.15
subset = np.where(times <= T)[0]
subset = subset[idx_t_1:]
x = np.linspace(min(EATs[subset]), max(EATs[subset]), 200)
pdf = tau/(a*T) * a/(x - c)
plt.figure()
plt.plot(x, pdf)
plt.xlabel('EAT [mmHg]')
plt.ylabel('PDF')
plt.title('EAT PDF for T = %g' % T)
plt.grid(True)
plt.savefig('EAT_PDF.png')

print 'Maximal time for PDF: %g' % T
print 'EAT mean   = %g' % np.mean(EATs[subset])
print 'EAT median = %g' % np.median(EATs[subset])

# plot maximum, mean and minimum of PO2_RBC over time
plt.figure()
plt.plot(times[subset], PO2_RBC_array[subset,:])
plt.grid(True)

# fit an exponential to PO2_RBC_max
plt.show()
popt, pcov = curve_fit(func, times, PO2_RBC_array[:,2])
a   = popt[0]
tau = 1/popt[1]
c   = popt[2]
print "Exponent for PO2 RBC max = %g" % tau


