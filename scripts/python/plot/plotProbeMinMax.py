#!/usr/bin/env python
"""
Plot the minimum/maximum plasma PO2 values at a probe for an Eulerian simulation.
"""

import argparse
import matplotlib.pyplot as plt
import numpy as np
import os

from HbO2.plot.labels import setXLabel, setYLabel
from HbO2.setup.case import SimulationParametersFactory
from postprocessing.extractProbeEATs import extractEATs
from postprocessing.loadProbesEuler import loadProbes
from plot.figureoptions import FigureOptions


def plotProbeMinMax(eat_dict, sim_params, from_time, plot_type, x_var='LD'):
    """
    Plot the min/max PO2 at a given probe location.

    Args:
        eat_dict (dict): dictionary with EAT information, generated by extractProbeEATs
        sim_params (SimulationParameters): simulation parameters
        from_time (float): time from which to plot the EATs
        plot_type (str): indicates points to plot ('minMax' or 'all')
        x_var (str): variable to plot on the x_axis ('LD', 'flow' or 'halftime')
    """
    plot_locations = []
    if plot_type == 'minMax':
        plot_locations = ['min', 'hollow']
    if plot_type == 'minMaxTissue':
        plot_locations = ['min', 'hollow', 'tissue']
    elif plot_type == 'all':
        plot_locations = ['min', 'hollow', 'rear', 'front']

    style = {'facecolor': 'None',
             's': 30,
             'linewidth': 0.5}
    
    from_idx = np.searchsorted(eat_dict['t_front'], np.array(from_time))
    LD = np.array(eat_dict['LD'][from_idx:])
    if x_var == 'LD':
        x_values = LD
    elif x_var == 'flow':
        x_values = LD*sim_params['RBCVelocity']/sim_params['RBCLength']
    elif x_var == 'halftime':
        spacings = sim_params['RBCLength']*(1/LD - 1)
        x_values = 1e3*spacings/(2*sim_params['RBCVelocity'])
        y = eat_dict['PO2_min'][from_idx:]
        print 'Mean RBC PO2: {:g}'.format(np.mean(eat_dict['PO2_hollow'][from_idx:]))
        print np.mean(y[np.where(x_values <= 10.25)])
        print np.mean(y[np.where((x_values > 10.25) & (x_values <= 15.5))])
        print np.mean(y[np.where(x_values > 15.5)])
    else:
        raise ValueError('Invalid value of x_values, should be "LD", "flow" or "halftime".')

    print plot_locations
    if 'rear' in plot_locations:
        plt.scatter(x_values, eat_dict['PO2_rear'][from_idx:], marker='s', edgecolor='k', **style)
    if 'hollow' in plot_locations:
        plt.scatter(x_values, eat_dict['PO2_hollow'][from_idx:], marker='o', edgecolor='r', **style)
    if 'front' in plot_locations:
        plt.scatter(x_values, eat_dict['PO2_front'][from_idx:], marker='o', edgecolor='g', **style)
    if 'min' in plot_locations:
        plt.scatter(x_values, eat_dict['PO2_min'][from_idx:], marker='^', edgecolor='b', **style)
    if 'tissue' in plot_locations:
        # plt.scatter(eat_dict['LD'][from_idx:], eat_dict['PO2_tissue'][from_idx:], marker='+', edgecolor='g', **style)
        # legends.append('tissue')
        plt.scatter(x_values, eat_dict['PO2_min'][from_idx:] - eat_dict['PO2_tissue'][from_idx:],
                    marker='+', s=30, facecolor='k', edgecolor='k', linewidth=0.5)#, **style)

    if x_var == 'LD':
        setXLabel('LD', '-')
    elif x_var == 'flow':
        setXLabel(r'q_{\mathrm{rbc}}', '\mathrm{RBC}/\mathrm{s}')
    elif x_var == 'halftime':
        setXLabel(r'\mathrm{RBC\;half\;spacings}', 'ms')
        plt.xlim([0, plt.gca().get_xlim()[1]])
    setYLabel('PO2', 'mmHg')
    # plt.ylim([35, 85])


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--field', '-f', help='Field to plot', default='PO2')
    parser.add_argument('--probeName', '-p', help='Name of the probe directory', 
                        default='probeMidstreamPO2')
    parser.add_argument('--allProbes', help='Plot data for all probes (precedes --probeName)', 
                        action='store_true')
    parser.add_argument('--xValue', help='Quantity to plot on the x-axis', default='LD')
    parser.add_argument('--from_time', type=float, help='Time from which to plot EATs',
                        default=0.0)
    
    figOptions = FigureOptions(parser)

    args = parser.parse_args()
    fieldName = args.field
    probeName = args.probeName
    allProbes = args.allProbes
    from_time = args.from_time
    x_value = args.xValue
    figOptions.parseOptions(args)

    sim_params = SimulationParametersFactory().make_sim_params('.')

    probeNames = []
    if allProbes:
        for f in os.listdir('.'):
            if os.path.isdir(f) and f.startswith('probe') \
                                and f.endswith('PO2'):
                probeNames.append(f)

        plotType = 'minMax'
        plotName = 'allProbesMinMax'
    else:
        probeNames = [probeName]
        plotType = 'minMaxTissue'
        plotName = '%sMinMax' % probeName 

    for probeName in probeNames:
        probes = loadProbes('domain', probeName, fieldName)
        EAT_dict = extractEATs('domain', probes, 0)
        plotProbeMinMax(EAT_dict, None, from_time, plotType, x_var=x_value)
        figOptions.adjustAxes()

    plotName += '_{:s}'.format(x_value)
    figOptions.saveFig(plotName)