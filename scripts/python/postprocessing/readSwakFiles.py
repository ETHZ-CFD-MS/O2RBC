import os
import numpy as np

from parse.case import time_dirs


# read an entry in a post-processing file generated by swak4Foam.
# The line corresponds to the argument time.
# The column index is given by colIdx.
def readSwakFileEntry(caseName, statName, time, colStat):
    if colStat == "min":
        colIdx = 2
    elif colStat == "max":
        colIdx = 3
    elif colStat == "mean":
        colIdx = 1
    else:
        raise NameError('The argument colStat must take value min, max or mean.')

    filePath = createSwakFilePath(caseName, statName)
    array = loadSwakFile(filePath)

    for line in array:
        if line[0] == time:
            return line[colIdx]

    print "Line with time = " + str(time) + " not found."

# return a column in a post-processing file generated by swak4Foam.
def readSwakFileColumn(caseName, statName, colStat):
    if colStat == "min":
        colIdx = 2
    elif colStat == "max":
        colIdx = 3
    elif colStat == "mean":
        colIdx = 1
    elif colStat == "time":
        colIdx = 0
    else:
        raise NameError('The argument colStat must take value min, max, mean or time.')

    filePath = createSwakFilePath(caseName, statName)
    array = loadSwakFile(filePath)

    return array[:,colIdx]

# Loads all entries in a swak4Foam postprocessing file.
def loadSwakFile(filePath):
    num_lines = sum(1 for line in open(filePath))
    # FIXME: this is a hack...
    num_col   = min(len(line.split()) for line in open(filePath))
    # initialize numpy array (-1 => remove header)
    array = np.zeros( (num_lines-1, num_col) )
    with open(filePath, 'r') as f:
        # skip header
        next(f)
        i = 0
        for line in f:
            array[i,:] = [float(x) for x in line.split()]
            i = i+1

    return array

# Compute EAT at a particular time for an OpenFOAM case
# (works using near_RBC_wall_PO2)
def getEAT(caseName, time):
    statNameMax = 'near_RBC_wall_PO2'
    statNameMin = 'centerline_PO2'

    max_PO2 = readSwakFileEntry(caseName, statNameMax, time, "max")
    min_PO2 = readSwakFileEntry(caseName, statNameMin, time, "min")

    if (max_PO2 == None or min_PO2 == None):
        print "Entry not found in swak4Foam files for case %s at time %g" % \
            (caseName, time)

    return max_PO2 - min_PO2

# Compute EAT at all times for an OpenFOAM case
# (works using near_RBC_wall_PO2)
def getEATs(caseName):
    statNameMax = 'near_RBC_wall_PO2'
    statNameMin = 'centerline_PO2'

    max_PO2 = readSwakFileColumn(caseName, statNameMax, "max")
    min_PO2 = readSwakFileColumn(caseName, statNameMin, "min")

    return max_PO2 - min_PO2


def createSwakFilePath(caseName, statName):
    swakPrefix = 'swakExpression_'
    swakFolder = os.path.join(caseName, 'postProcessing', swakPrefix + statName)
    if not os.path.exists(swakFolder):
        swakFolder = os.path.join(caseName, swakPrefix + statName)
    timeDir = time_dirs(swakFolder)[-1]
    filePath = os.path.join(swakFolder, timeDir, statName)
    if os.path.exists(filePath):
        return filePath
    else:
        raise ValueError('No swak file found for case {} and statistic {}'.format(
            caseName, statName))
