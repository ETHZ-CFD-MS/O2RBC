"""
Utilities to read postprocessing files generated by OpenFOAM.
"""

import os
import numpy as np


def postProcessingDirPath(caseName, dirName):
    """
    Build the path to a postprocessing directory produced by OpenFOAM.
    Supports paths for the versions 2.1 and 2.3 of OpenFOAM.

    Args:
        caseName: Path to current case
        dirName:  Name of the directory with postprocessing files
    Returns:
         path to directory
    Raises:
        IOError: if the required paths does not exist
    """
    dirPathNew = os.path.join(caseName, 'domain', 'postProcessing', dirName)
    dirPathOld = os.path.join(caseName, 'domain', dirName)
    if os.path.isdir(dirPathNew):
        return dirPathNew
    elif os.path.isdir(dirPathOld):
        return dirPathOld
    else:
        raise IOError('Paths %s and %s does not exist' % (dirPathNew, dirPathOld))


def postProcessingFilePath(caseName, dirName, fileName):
    """
    Build the path to a postprocessing file produced by OpenFOAM

    Args:
        caseName: Path to current case
        dirName:  Name of the directory with postProcessing files
        fileName: Name of the file to load
    Returns:
        path to file
    """
    dirPath = postProcessingDirPath(caseName, dirName)
    firstDir = os.walk(dirPath).next()[1][0]
    return os.path.join(dirPath, firstDir, fileName)


def postProcessingFilePaths(caseName, dirName, fileName):
    """
    Return a list of paths to postprocessing files produced by OpenFOAM.

    For all time folders in dirName, the corresponding path to fileName is
    put into the list. A typical output would be:
        ['domain/postProcessing/0/dirName/fileName',
         'domain/postProcessing/1/dirName/fileName']

    Args:
        caseName: Path to current case
        dirName:  Name of the directory with postProcessing files
        fileName: Name of the file to load
    Returns:
        List of file paths
    """
    dirPath = postProcessingDirPath(caseName, dirName)
    return [os.path.join(dirPath, timeDir, fileName)
            for timeDir in postProcessingTimeSteps(caseName, dirName)
            if os.path.exists(os.path.join(dirPath, timeDir, fileName))]


def postProcessingTimeSteps(caseName, dirName):
    """
    Return the sorted name list of time step folders that are present in a given
    postprocessing directory

    Args:
        caseName: path to current case
        dirName: name of the directory with postprocessing files
    Returns:
        Name list of the time step folders
    """
    sampleDirPath = postProcessingDirPath(caseName, dirName)
    return sorted(os.walk(sampleDirPath).next()[1])


def readPostProcessingFile(filePath):
    """
    Read a postprocessing file into a dictionary (only supports float values)

    Args:
        filePath: Path to postprocessing file
    Returns:
        Dictionary with entries 'header' and 'values'
    Raises:
        IOError: if file does not exist
    """
    if not os.path.isfile(filePath):
        raise IOError('No file with path %s' % filePath)
    header = []
    values = []
    with open(filePath, 'r') as f:
        i = 0;
        for line in f:
            if line[0] == '#':
                header = line.split()
            else:
                split_line = [float(x) for x in line.split()]
                values.append(np.asarray(split_line))
                i = i+1
    return {'header': header,
            'values': np.asarray(values)}